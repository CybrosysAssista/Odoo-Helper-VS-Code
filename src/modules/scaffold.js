const vscode = require('vscode');

/**
 * Scaffold the module sub‑folders and files
 */
async function createOdooScaffold(rootUri, moduleName, type) {
    const displayName = moduleName
      .split("_")
      .map((w) => w[0].toUpperCase() + w.slice(1))
      .join(" ");
    if (type == 'basic') {
        const folders = ['models', 'views', 'security'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated module",
    "description": "This is an autogenerated module scaffold.",
    "author": 'Your Company',
    "maintainer": "",
    "website": 'https://www.yourcompany.com',
    "depends": ["base"],
    "data": [
    "security/ir.model.access.csv",
    "views/${moduleName}_views.xml"
    ],
    "assets": {},
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.'); // e.g., my_module → my.module
        const formattedModelName = modelName.replace(/\./g, '_')
        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
     default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)

    @api.model_create_multi
    def create(self, vals_list):
        """
        Override the create method to assign a sequence-generated name 
        to each record being created.

        :param vals_list: List of dictionaries with field values for new records.
        :return: Recordset of newly created records.
        """
        return super().create(vals_list)

    def write(self, vals):
        """
        Override the write method to include custom behavior when updating records.

        :param vals: Dictionary of field values to update.
        :return: True if the write was successful.
        """
        return super().write(vals)

    def unlink(self):
        """
        Override the unlink method to include custom behavior when deleting records.

        :return: True if the records were successfully deleted.
        """
        return super().unlink()

    def action_do_something(self):
        self.ensure_one()
        # Placeholder for button action
        pass
    `;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${moduleName}_main" name="Records" parent="menu_${moduleName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
        };

        // Create all directories
        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        // Create all files
        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'advanced') {
        const folders = ['models', 'views', 'security', 'data', 'demo'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated advanced module",
    "description": "This is an autogenerated advanced module scaffold.",
    "author": 'Your Company',
    "maintainer": "",
    "website": 'https://www.yourcompany.com',
    "depends": ["base"],
    "data": [
        "security/ir.model.access.csv",
        "data/ir_sequence_data.xml",
        "data/ir_cron_data.xml",
        "views/${moduleName}_views.xml"
    ],
    "demo": [
        "demo/${moduleName}_data.xml"
    ],
    "assets": {},
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from datetime import datetime
from odoo import api,fields,models,_

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
     default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)

    @api.model_create_multi
    def create(self, vals_list):
        """
        Override the create method to assign a sequence-generated name 
        to each record being created.

        :param vals_list: List of dictionaries with field values for new records.
        :return: Recordset of newly created records.
        """
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        """
        Override the write method to include custom behavior when updating records.

        :param vals: Dictionary of field values to update.
        :return: True if the write was successful.
        """
        return super().write(vals)

    def unlink(self):
        """
        Override the unlink method to include custom behavior when deleting records.

        :return: True if the records were successfully deleted.
        """
        return super().unlink()

    def action_do_something(self):
        self.ensure_one()
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="date"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="${formattedModelName}_demo_data_1" model="${modelName}">
        <field name="state">draft</field>
        <field name="description">Demo Description</field>
        
    </record>
    <record id="${formattedModelName}_demo_data_2" model="${modelName}">
        <field name="state">confirmed</field>
        <field name="description">Demo Description</field>
    </record>
</odoo>
`;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
        <field name="name">${moduleName} Sequence</field>
        <field name="code">${formattedModelName}</field>
        <field name="prefix">SEQ</field>
        <field name="padding">5</field>
        <field name="number_next">1</field>
        <field name="number_increment">1</field>
        <field name="company_id" eval="False"/>
    </record>
</odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          "data/ir_sequence_data.xml": sequenceXml,
          [`demo/${moduleName}_data.xml`]: dataXml,
          "data/ir_cron_data.xml": cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_basic') {
        const folders = ['models', 'views', 'security', 'static/src/js', 'static/src/xml'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated OWL module",
    "description": "This is an autogenerated OWL module scaffold.",
    "author": 'Your Company',
    "maintainer": "",
    "website": 'https://www.yourcompany.com',
    "depends": ["base", "web"],
    "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml"
    ],
    "assets": {
        "web.assets_backend": [
            "${moduleName}/static/src/js/client_action.js",
            "${moduleName}/static/src/xml/client_action.xml"
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');
        const modelClassName = moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase());

        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
        default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)

    def action_do_something(self):
        self.ensure_one()
        return {
            'type': 'ir.actions.client',
            'tag': '${moduleName}.${moduleName}',
            'params': {
                'model': self._name,
                'id': self.id,
            }
        }
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Open OWL View" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const clientAction = `/** @odoo-module */
import { registry } from '@web/core/registry';
import { Component } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";

export class ${modelClassName} extends Component {
    setup() {
        this.orm = useService("orm");
        this.notification = useService("notification");
    }
}

${modelClassName}.template = "${moduleName}.${modelClassName}";
registry.category("actions").add("${moduleName}.${moduleName}", ${modelClassName});`;

        const clientActionTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.${modelClassName}">
        <div class="container mt-2">
            <h1 class="text-center text-bold text-primary">Welcome Screen</h1>
        </div>
    </t>
</templates>`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          ["static/src/js/client_action.js"]: clientAction,
          ["static/src/xml/client_action.xml"]: clientActionTemplate,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_advanced') {
        const folders = ['models', 'views', 'security', 'data', 'demo', 'static', 'controllers'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "",
    "description": "",
    "author": "",
    "maintainer": "",
    "website": "",
    "depends": ["base", "mail", "contacts"],
    "data": [
        "security/ir.model.access.csv",
        "data/ir_sequence_data.xml",
        "data/ir_cron_data.xml",
        "views/${moduleName}_views.xml"
    ],
    "demo": [
        "demo/${moduleName}_data.xml"
    ],
    "assets": {
        'web.assets_backend': [
            '${moduleName}/static/src/js/client_action.js',
            '${moduleName}/static/src/xml/client_action.xml',
            'https://www.gstatic.com/charts/loader.js'
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelClassName = moduleName.replace(/_/g, '').replace(/\b\w/g, l => l.toUpperCase());
        const controllerPy = `# -*- coding: utf-8 -*-
from odoo.http import Controller, route, request


class OwlDashboard(Controller):

    @route('/apply/filter', type='json', auth='public', csrf=False)
    def apply_filter(self, date):
        domain = [('date', '=', date)] if date else []
        partner_data = request.env['${modelName}'].read_group(
            domain=domain,
            fields=['amount'],
            groupby=['partner_id'],
            lazy=False,
        )
        result = [{
            'partner': data['partner_id'][1],
            'total_records': data['__count'],
            'total_amount': data['amount'],
        } for data in partner_data]
        return result

    
    `;

        const modelPy = `# -*- coding: utf-8 -*-
from datetime import datetime
from odoo import models, fields, api, _

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'
    _inherit = ['mail.thread']

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([
        ('draft', 'Draft'),
        ('confirmed', 'Confirmed'),
        ('done', 'Done')
    ], default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)
    company_id = fields.Many2one(comodel_name='res.company', string='Company',
                                 default=lambda self: self.env.company)
    partner_id = fields.Many2one(comodel_name='res.partner', string='Partner', required=True)
    user_id = fields.Many2one(
        comodel_name='res.users',
        string='User',
        default=lambda self: self.env.user,
    )



    @api.model_create_multi
    def create(self, vals_list):
        """
        Override the create method to assign a sequence-generated name 
        to each record being created.

        :param vals_list: List of dictionaries with field values for new records.
        :return: Recordset of newly created records.
        """
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        """
        Override the write method to include custom behavior when updating records.

        :param vals: Dictionary of field values to update.
        :return: True if the write was successful.
        """
        return super().write(vals)

    def unlink(self):
        """
        Override the unlink method to include custom behavior when deleting records.

        :return: True if the records were successfully deleted.
        """
        return super().unlink()

    def action_do_something(self):
        self.ensure_one()
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                    <field name="state" widget="statusbar"/>
                </header>
                <sheet>
                    <div class="oe_title">
                        <label for="name"/>
                        <h1>
                            <field name="name"/>
                        </h1>
                    </div>
                    <group>
                        <group>
                            <field name="partner_id"/>
                            <field name="amount"/>
                            <field name="date"/>
                        </group>
                        <group>
                            <field name="company_id"/>
                            <field name="description"/>
                        </group>

                        <field name="active" invisible="1"/>
                    </group>
                </sheet>
                 <chatter/>
            </form>

        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Client Action -->
    <record id="${moduleName}_action" model="ir.actions.client">
            <field name="name">Client Action</field>
            <field name="tag">${moduleName}.${moduleName}</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${moduleName}" action="${moduleName}_action"/>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="${formattedModelName}_demo_data_1" model="${modelName}">
        <field name="state">draft</field>
        <field name="description">Demo Description</field>
        <field name="partner_id" ref="base.res_partner_1"/>
        <field name="amount">100</field>
    </record>
    <record id="${formattedModelName}_demo_data_2" model="${modelName}">
        <field name="state">confirmed</field>
        <field name="description">Demo Description</field>
        <field name="partner_id" ref="base.res_partner_2"/>
        <field name="amount">200</field>
    </record>
    <record id="${formattedModelName}_demo_data_3" model="${modelName}">
        <field name="state">confirmed</field>
        <field name="description">Demo Description</field>
        <field name="partner_id" ref="base.res_partner_3"/>
        <field name="amount">10</field>
    </record>
</odoo>
    `;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
        <field name="name">${moduleName} Sequence</field>
        <field name="code">${formattedModelName}</field>
        <field name="prefix">SEQ</field>
        <field name="padding">5</field>
        <field name="number_next">1</field>
        <field name="number_increment">1</field>
        <field name="company_id" eval="False"/>
    </record>
</odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;
        const clientAction =`/** @odoo-module */
import { registry } from '@web/core/registry';
import { Component, onWillStart, useState, onMounted, useEffect } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";
import { rpc } from "@web/core/network/rpc";
export class ${modelClassName} extends Component {
    setup() {
        this.orm = useService("orm");
        this.state = useState({
            records: [],
            selectedRecord: null,
            date: false,
            chartType: null,
            viewType: null,
        });
        onWillStart(this.onWillStart);
        onMounted(this._renderGraph);
        useEffect(() => {
            this._renderGraph()
        }, () => [this.state.date, this.state.chartType])
    }
    async onWillStart() {
        this.state.records = await this.orm.searchRead(
            "${modelName}",
            ['|', ['active', '=', true], ['active', '=', false]],
            ['name', 'state', 'description', 'active', 'date', 'amount', 'company_id', 'user_id']
        );
        const savedRecordId = localStorage.getItem("${formattedModelName}_selected_record");
        if (savedRecordId) {
            const savedId = parseInt(savedRecordId, 10);
            this.state.selectedRecord = this.state.records.find(record => record.id === savedId) || null;
        }
    }
    async _renderGraph() {
            var response = await rpc('/apply/filter',  {
            'date': this.state.date,
        })
        if (this.state.chartType == 'pie_chart') {
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            function drawChart() {
                var chartData = [['Partner', 'Name']];
                response.forEach(function(item) {
                    chartData.push([item.partner, item.total_records]);
                });
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                title: 'Pie Chart',
                sliceVisibilityThreshold: 0,
                pieSliceText: 'value',
                pieSliceTextStyle: {
                    color: 'black',
                },
                };
                var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                chart.draw(data, options);
            }
        } else if (this.state.chartType == 'donut_chart') {
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            function drawChart() {
                var chartData = [['Partner', 'Name']];
                response.forEach(function(item) {
                    chartData.push([item.partner, item.total_records]);
                });
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                title: 'Donut Chart',
                sliceVisibilityThreshold: 0,
                pieHole: 0.4,
                pieSliceText: 'value',
                pieSliceTextStyle: {
                    color: 'black',
                },
                };
                var chart = new google.visualization.PieChart(document.getElementById('piechart'));
                chart.draw(data, options);
            }
        } else if (this.state.chartType == 'curved_chart') {
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            function drawChart() {
                var chartData = [['Partner', 'Total Amount', 'Total Count']];
                response.forEach(function(item) {
                    chartData.push([item.partner, item.total_amount, item.total_records]);
                });
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                    title: 'Line Chart',
                    curveType: 'function',
                    legend: { position: 'bottom' }
                };
                var chart = new google.visualization.LineChart(document.getElementById('piechart'));
                chart.draw(data, options);
            }
        } else if (this.state.chartType == 'line_chart') {
            google.charts.load('current', {'packages':['corechart']});
            google.charts.setOnLoadCallback(drawChart);
            function drawChart() {
                var chartData = [['Partner', 'Total Amount', 'Total Count']];
                response.forEach(function(item) {
                    chartData.push([item.partner, item.total_amount, item.total_records]);
                });
                var data = google.visualization.arrayToDataTable(chartData);
                var options = {
                    title: 'Line Chart',
                    legend: { position: 'bottom' }
                };
                var chart = new google.visualization.LineChart(document.getElementById('piechart'));
                chart.draw(data, options);
            }
        }
    }
    onSelectRecord(event) {
        this.state.viewType = 'record_table'
        this.state.chartType = null
        const selectedId = event.target.value ? parseInt(event.target.value, 10) : null;
        this.state.selectedRecord = this.state.records.find(record => record.id === selectedId) || null;
        localStorage.setItem("${formattedModelName}_selected_record", selectedId || "");
    }
    onSelectChart(event) {
        this.state.viewType = 'graph_view'
        this.state.chartType = event.target.value
    }
}
${modelClassName}.template = "${moduleName}.${modelClassName}";
registry.category("actions").add("${moduleName}.${moduleName}", ${modelClassName});`;

        const clientActionTemplate =
            `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.${modelClassName}">
        <style>
            /* Base Styles */
            .card {
                border-radius: 15px;
                box-shadow: 0 10px 20px rgba(0, 0, 0, 0.08);
                transition: all 0.3s ease;
                border: none;
                overflow: hidden;
            }
            
            .card-header {
                background-image: linear-gradient(135deg, #4e73df 0%, #224abe 100%);
                border-bottom: none;
                padding: 1.2rem;
            }
            
            .card-body {
                padding: 1.5rem;
            }
            
            /* Header Section */
            .header-section {
                background: linear-gradient(120deg, #f8f9fa 0%, #e9ecef 100%);
                border-radius: 15px;
                padding: 2.5rem;
                margin-bottom: 2.5rem;
                box-shadow: 0 5px 15px rgba(0, 0, 0, 0.05);
                position: relative;
                overflow: hidden;
            }
            
            .header-section::before {
                content: "";
                position: absolute;
                top: -50px;
                right: -50px;
                width: 100px;
                height: 100px;
                border-radius: 50%;
                background: rgba(78, 115, 223, 0.1);
            }
            
            .header-section::after {
                content: "";
                position: absolute;
                bottom: -60px;
                left: -60px;
                width: 120px;
                height: 120px;
                border-radius: 50%;
                background: rgba(78, 115, 223, 0.08);
            }
            
            .page-title {
                font-weight: 800;
                letter-spacing: -0.5px;
                position: relative;
                display: inline-block;
                color: #4e73df !important;
                margin-bottom: 0.5rem;
            }
            
            .page-title::after {
                content: "";
                position: absolute;
                bottom: -8px;
                left: 50%;
                transform: translateX(-50%);
                width: 80px;
                height: 4px;
                background: linear-gradient(90deg, #4e73df, #36b9cc);
                border-radius: 2px;
            }
            
            /* Table Styles */
            .table-container {
                border-radius: 10px;
                overflow: hidden;
                margin-top: 0.5rem;
            }
            
            .table {
                margin-bottom: 0;
            }
            
            .table thead th {
                background-color: #f8f9fc;
                border-top: none;
                font-weight: 600;
                letter-spacing: 0.5px;
                text-transform: uppercase;
                font-size: 0.85rem;
                color: #4e73df;
                padding: 1rem;
            }
            
            .table tbody tr:hover {
                background-color: rgba(78, 115, 223, 0.05);
            }
            
            .table tbody th {
                font-weight: 600;
            }
            
            /* Form Elements */
            .select-container {
                position: relative;
                margin-bottom: 1rem;
            }
            
            .select-container::after {
                content: '107';
                font-family: 'Font Awesome 6 Free';
                font-weight: 900;
                position: absolute;
                right: 15px;
                top: 70%;
                transform: translateY(-50%);
                pointer-events: none;
                color: #4e73df;
            }
            
            .form-select {
                padding: 0.75rem 1rem;
                border-radius: 10px;
                border: 1px solid #e3e6f0;
                background-color: #ffffff;
                font-weight: 500;
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.03);
                transition: all 0.2s ease;
            }
            
            .form-select:focus {
                border-color: #bac8f3;
                box-shadow: 0 0 0 0.25rem rgba(78, 115, 223, 0.15);
            }
            
            /* Badge  Button Styles */
            .badge {
                padding: 0.5rem 0.8rem;
                font-weight: 600;
                letter-spacing: 0.5px;
            }
            
            /* Text Elements */
            .record-value {
                font-weight: 500;
                color: #28a745 !important;
            }
            
            .text-muted {
                color: #858796 !important;
            }
            
            .lead {
                font-weight: 400;
            }
            
            /* Animation  Effects */
            .animated-item {
                animation: fadeInUp 0.6s ease-out forwards;
            }
            
            @keyframes fadeInUp {
                from {
                    opacity: 0;
                    transform: translateY(20px);
                }
                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }
            
            /* Empty State */
            .empty-state-icon {
                font-size: 4rem;
                color: #d1d3e2;
                margin-bottom: 1.5rem;
            }
            
            /* Card Footer */
            .card-footer {
                background-color: #f8f9fc;
                border-top: 1px solid #e3e6f0;
                padding: 1rem 1.5rem;
            }
            
            /* Custom scrollbar */
            .o_action_manager {
                overflow-y: scroll !important;
                scrollbar-width: thin;
                scrollbar-color: #4e73df #f8f9fc;
            }
            
            .o_action_manager::-webkit-scrollbar {
                width: 8px;
            }
            
            .o_action_manager::-webkit-scrollbar-track {
                background: #f8f9fc;
            }
            
            .o_action_manager::-webkit-scrollbar-thumb {
                background-color: #4e73df;
                border-radius: 6px;
                border: 3px solid #f8f9fc;
            }
            
            /* Hover Effects */
            .card:hover {
                transform: translateY(-3px);
                box-shadow: 0 15px 30px rgba(0, 0, 0, 0.1);
            }
        </style>
        <div class="container py-5">
            <!-- Header Section -->
            <div class="header-section text-center animated-item">
                <h1 class="page-title display-4">Welcome Dashboard</h1>
            </div>
            <!-- Content Section -->
            <div class="row">
                <!-- Selection Card -->
                <div class="col-md-4 mb-4">
                    <div class="card h-100 animated-item">
                        <div class="card-header">
                            <h5 class="card-title mb-0 text-white d-flex align-items-center">
                                <i class="fa fa-list-ul me-2"/>
                                <span>Operations</span>
                            </h5>
                        </div>
                        <div class="card-body">
                            <form>
                                <div class="form-group select-container">
                                    <label for="model-records" class="form-label fw-bold mb-2">Choose from available records:</label>
                                    <select class="form-select" id="model-records"
                                            t-on-change="onSelectRecord">
                                        <option value="" selected="">Select an option</option>
                                        <t t-foreach="state.records" t-as="record"
                                        t-key="record.id">
                                            <option t-att-value="record.id"
                                                    t-att-selected="record.id === state.selectedRecord?.id">
                                                <t t-esc="record.name"/>
                                            </option>
                                        </t>
                                    </select>
                                </div>
                            </form>
                            <p class="text-muted small mt-3 fst-italic">
                                <i class="fa fa-info-circle me-1"/>
                                Select a record to view its complete details
                            </p>
                        </div>
                        <div class="card-body">
                            <form>
                                <div class="form-group select-container">
                                    <label for="model-records" class="form-label fw-bold mb-2">Graphical Representation:</label>
                                    <select class="form-select" id="model-graph"
                                            t-on-change="onSelectChart">
                                        <option selected="">Select an option</option>
                                        <option value="pie_chart">Pie chart</option>
                                        <option value="line_chart">Line chart</option>
                                        <option value="curved_chart">Curved chart</option>
                                        <option value="donut_chart">Donut chart</option>
                                    </select>
                                </div>
                            </form>
                            <p class="text-muted small mt-3 fst-italic">
                                <i class="fa fa-info-circle me-1"/>
                                Select an option to view the graphical representation
                            </p>
                        </div>
                    </div>
                </div>
                <!-- Details Card -->
                <div class="col-md-8">
                    <t t-if="state.viewType == 'record_table'">
                        <t t-if="state.selectedRecord">
                            <div class="card animated-item">
                                <div class="card-header d-flex justify-content-between align-items-center">
                                    <h5 class="card-title mb-0 text-white d-flex align-items-center">
                                        <i class="fa fa-info-circle me-2"/>
                                        <span>Architecture</span>
                                    </h5>
                                </div>
                                <div class="card-body">
                                    <div class="table-container">
                                        <table class="table table-striped table-hover">
                                            <thead>
                                                <tr>
                                                    <th scope="col">Field</th>
                                                    <th scope="col">Value</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                <t t-foreach="Object.entries(state.selectedRecord)" t-as="entry" t-key="entry[0]">
                                                    <tr>
                                                        <th scope="row">
                                                            <i class="fa fa-circle-dot me-2 text-primary"/>
                                                            <span t-esc="entry[0]"/>
                                                        </th>
                                                        <td>
                                                            <span class="record-value" t-esc="entry[1]"/>
                                                        </td>
                                                    </tr>
                                                </t>
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            </div>
                        </t>
                        <t t-else="">
                            <div class="card h-100 animated-item">
                                <div class="card-body d-flex flex-column justify-content-center align-items-center text-center p-5">
                                    <i class="fa fa-hand-point-left empty-state-icon"/>
                                    <h4 class="mt-2 mb-3 text-primary">No Record Selected</h4>
                                    <p class="text-muted mb-0">Please select a record from the list to view its details</p>
                                </div>
                            </div>
                        </t>
                    </t>
                    <t t-elif="state.viewType == 'graph_view'">
                        <div class="card h-100 animated-item">
                            <input class="form-control" t-model="state.date" type="date" style="background-color: white" placeholder="Choose a date"/>
                            <div id="piechart" style="width: 900px; height: 500px;"/>
                        </div>
                    </t>
                    <t t-else="">
                    </t>
                </div>
            </div>
        </div>
    </t>
</templates>`;

        const files = {
          "__init__.py": `# -*- coding: utf-8 -*-
from . import models, controllers`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": `# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          "controllers/__init__.py": `# -*- coding: utf-8 -*-
from . import main`,
          ["controllers/main.py"]: controllerPy,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          "data/ir_sequence_data.xml": sequenceXml,
          ["static/src/js/client_action.js"]: clientAction,
          ["static/src/xml/client_action.xml"]: clientActionTemplate,
          [`demo/${moduleName}_data.xml`]: dataXml,
          "data/ir_cron_data.xml": cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'website_theme') {
    const folders = ['views'];
    
    const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "1.0.0",
    "category": "Theme",
    "summary": "Auto-generated Website Theme",
    "description": "This is an autogenerated website theme module scaffold.",
    "author": 'Your Company',
    "maintainer": "",
    "website": 'https://www.yourcompany.com',
    "depends": ["website"],
    "data": [
        "views/layout_template_views.xml",
        "views/header_template_views.xml",
        "views/footer_template_views.xml"
    ],
    "assets": {
        "web._assets_primary_variables": [],
        "web.assets_frontend": []
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": False
}`;

    const layoutTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <template id="${moduleName}_homepage" inherit_id="website.homepage">
        <xpath expr="//*[@id='wrap']" position="replace">
            <div id="wrap" class="oe_structure">
                <section class="d-flex align-items-center justify-content-center" style="min-height: 50vh;">
                    <div class="container">
                        <div class="row justify-content-center text-center">
                            <div class="col-lg-8">
                                <h2 class="display-3 mb-4">Welcome to <b>Homepage</b>!</h2>
                                <p class="lead">Start building your theme</p>
                            </div>
                        </div>
                    </div>
                </section>
            </div>
        </xpath>
    </template>
</odoo>`;

    const headerTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <template id="${moduleName}_header" inherit_id="website.layout" name="${displayName} Header">
        <xpath expr="//header" position="replace">
            <header class="py-3 bg-light">
                <div class="container">
                    <div class="row align-items-center">
                        <div class="col-12 col-md-4 text-md-start text-center mb-2 mb-md-0">
                            <h1 class="h3 m-0 fw-bold">${displayName}</h1>
                        </div>
                        <div class="col-12 col-md-4 text-center mb-2 mb-md-0">
                            <ul class="nav justify-content-center">
                                <li class="nav-item"><a class="nav-link" href="/">Home</a></li>
                                <li class="nav-item"><a class="nav-link" href="/aboutus">About</a></li>
                                <li class="nav-item"><a class="nav-link" href="/contactus">Contact</a></li>
                            </ul>
                        </div>
                        <div class="col-12 col-md-4 text-end d-none d-md-block"/>
                    </div>
                </div>
            </header>
        </xpath>
    </template>
</odoo>`;

    const footerTemplate = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <template id="${moduleName}_footer" inherit_id="web.frontend_layout">
        <xpath expr="//footer[@id='bottom']" position="replace">
            <footer id="bottom" class="bg-dark text-white o_footer_custom">
                <div class="container py-4">
                    <div class="row">
                        <div class="col-md-6">
                            <h5>Custom Footer Title</h5>
                            <p>Your custom footer content goes here.</p>
                        </div>
                        <div class="col-md-6 text-end">
                            <p> <span t-field="res_company.name"/> - All rights reserved.</p>
                        </div>
                    </div>
                </div>
            </footer>
        </xpath>
    </template>
</odoo>`;

    const files = {
        "__init__.py": `# -*- coding: utf-8 -*-`,
        "__manifest__.py": manifestContent,
        "views/layout_template_views.xml": layoutTemplate,
        "views/header_template_views.xml": headerTemplate,
        "views/footer_template_views.xml": footerTemplate,
    };

    const dirPromises = folders.map(dir =>
        vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
    );

    const filePromises = Object.entries(files).map(([relPath, content]) => {
        const fileUri = vscode.Uri.joinPath(rootUri, relPath);
        const uint8arr = Buffer.from(content, 'utf8');
        return vscode.workspace.fs.writeFile(fileUri, uint8arr);
    });

    await Promise.all([...dirPromises, ...filePromises]);
}
 else if (type == 'systray_module') {
        const folders = ['static'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated module",
    "description": "",
    "author": "",
    "maintainer": "",
    "website": "",
    "depends": ["base", "web"],
    "data": [],
    'assets': {
        'web.assets_backend': [
            '${moduleName}/static/src/js/systray.js',
            '${moduleName}/static/src/xml/systray_templates.xml',
        ],
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
    }`;

const systrayJS = `/** @odoo-module **/
import { registry } from "@web/core/registry";
import { useService } from "@web/core/utils/hooks";
import { Component } from "@odoo/owl";

class SystrayIcon extends Component {
    setup() {
        super.setup();
        this.notification = useService("notification");
    }

    showNotification() {
        this.notification.add("Hello! This is a notification", {
            title: "Systray Notification",
            type: "info",
            sticky: false,
        });
    }
}

SystrayIcon.template = "systray_icon";

export const systrayItem = {
    Component: SystrayIcon,
};

registry.category("systray").add("SystrayIcon", systrayItem, { sequence: 1 });
`;


const systrayXML = `<?xml version="1.0" encoding="UTF-8" ?>
<templates xml:space="preserve">
    <t t-name="systray_icon" owl="1">
        <div style="display: flex; align-items: center; height: 100%;">
            <i class="fa fa-star-o"
                title="My Custom Icon"
                style="cursor: pointer; font-size: 18px; padding: 0 5px; color: white;"
                t-on-click="showNotification"/>
        </div>
    </t>
</templates>`;

        const files = {
            '__init__.py': '',
            '__manifest__.py': manifestContent,
            [`static/src/js/systray.js`]: systrayJS,
            [`static/src/xml/systray_templates.xml`]: systrayXML,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    }
}

module.exports = {
    createOdooScaffold
}; 