const vscode = require('vscode');

/**
 * Scaffold the module sub‑folders and files
 */
async function createOdooScaffold(rootUri, moduleName, type) {
    const displayName = moduleName
      .split("_")
      .map((w) => w[0].toUpperCase() + w.slice(1))
      .join(" ");
    if (type == 'basic') {
        const folders = ['models', 'views', 'security'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated module",
    "description": "This is an autogenerated module scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base"],
    "data": [
    "security/ir.model.access.csv",
    "views/${moduleName}_views.xml"
    ],
    "assets": {},
    "license": "LGPL-3",
    "installable": True,
    "auto_install": True,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.'); // e.g., my_module → my.module
        const formattedModelName = modelName.replace(/\./g, '_')
        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
     default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)

    @api.model_create_multi
    def create(self, vals_list):
        """
        Override the create method to assign a sequence-generated name 
        to each record being created.

        :param vals_list: List of dictionaries with field values for new records.
        :return: Recordset of newly created records.
        """
        return super().create(vals_list)

    def write(self, vals):
        """
        Override the write method to include custom behavior when updating records.

        :param vals: Dictionary of field values to update.
        :return: True if the write was successful.
        """
        return super().write(vals)

    def unlink(self):
        """
        Override the unlink method to include custom behavior when deleting records.

        :return: True if the records were successfully deleted.
        """
        return super().unlink()

    def action_do_something(self):
        self.ensure_one()
        # Placeholder for button action
        pass
    `;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${moduleName}_main" name="Records" parent="menu_${moduleName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
        };

        // Create all directories
        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        // Create all files
        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'advanced') {
        const folders = ['models', 'views', 'security', 'data', 'demo'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated advanced module",
    "description": "This is an autogenerated advanced module scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base"],
    "data": [
        "security/ir.model.access.csv",
        "data/ir_sequence_data.xml",
        "data/ir_cron_data.xml",
        "views/${moduleName}_views.xml"
    ],
    "demo": [
        "demo/${moduleName}_data.xml"
    ],
    "assets": {},
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from datetime import datetime
from odoo import api,fields,models,_

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", default=lambda self: _('New'), readonly=True, copy=False,)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
     default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)

    @api.model_create_multi
    def create(self, vals_list):
        """
        Override the create method to assign a sequence-generated name 
        to each record being created.

        :param vals_list: List of dictionaries with field values for new records.
        :return: Recordset of newly created records.
        """
        for vals in vals_list:
            sequence = self.env['ir.sequence'].next_by_code('${formattedModelName}')
            vals['name'] = sequence or _('New')
        return super().create(vals_list)

    def write(self, vals):
        """
        Override the write method to include custom behavior when updating records.

        :param vals: Dictionary of field values to update.
        :return: True if the write was successful.
        """
        return super().write(vals)

    def unlink(self):
        """
        Override the unlink method to include custom behavior when deleting records.

        :return: True if the records were successfully deleted.
        """
        return super().unlink()

    def action_do_something(self):
        self.ensure_one()
        # Placeholder for button action
        pass

    def cron_sample_method(self):
        # Placeholder for scheduled action
        pass
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <!-- List View -->
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
            </list>
        </field>
    </record>

    <!-- Form View -->
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="date"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>

    <!-- Kanban View -->
    <record id="${formattedModelName}_view_kanban" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.kanban</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <kanban>
                <field name="name"/>
                <templates>
                    <t t-name="kanban-box">
                        <div class="oe_kanban_global_click">
                            <strong><field name="name"/></strong><br/>
                            <field name="state"/>
                        </div>
                    </t>
                </templates>
            </kanban>
        </field>
    </record>

    <!-- Calendar View -->
    <record id="${formattedModelName}_view_calendar" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.calendar</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <calendar string="Calendar" date_start="date">
                <field name="name"/>
            </calendar>
        </field>
    </record>

    <!-- Pivot View -->
    <record id="${formattedModelName}_view_pivot" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.pivot</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <pivot>
                <field name="state"/>
                <field name="amount"/>
            </pivot>
        </field>
    </record>

    <!-- Search View -->
    <record id="${formattedModelName}_view_search" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.search</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <search>
                <field name="name"/>
                <field name="state"/>
                <filter string="Draft" name="state" domain="[('state','=','draft')]"/>
                <filter string="Active" name="active" domain="[('active','=',True)]"/>
            </search>
        </field>
    </record>

    <!-- Action -->
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form,kanban,calendar,pivot</field>
    </record>

    <!-- Menu -->
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>
`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;
        const dataXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="${formattedModelName}_demo_data_1" model="${modelName}">
        <field name="state">draft</field>
        <field name="description">Demo Description</field>
        
    </record>
    <record id="${formattedModelName}_demo_data_2" model="${modelName}">
        <field name="state">confirmed</field>
        <field name="description">Demo Description</field>
    </record>
</odoo>
`;

        const sequenceXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo noupdate="1">
    <record id="ir_sequence_${formattedModelName}" model="ir.sequence">
        <field name="name">${moduleName} Sequence</field>
        <field name="code">${formattedModelName}</field>
        <field name="prefix">SEQ</field>
        <field name="padding">5</field>
        <field name="number_next">1</field>
        <field name="number_increment">1</field>
        <field name="company_id" eval="False"/>
    </record>
</odoo>
`;

        const cronXml = `<?xml version="1.0" encoding="utf-8"?>
<odoo>
    <record id="ir_cron_${formattedModelName}" model="ir.cron">
        <field name="name">${moduleName} Scheduled Action</field>
        <field name="model_id" ref="model_${formattedModelName}"/>
        <field name="state">code</field>
        <field name="code">model.cron_sample_method()</field>
        <field name="interval_number">1</field>
        <field name="interval_type">days</field>
        <field name="active">True</field>
    </record>
</odoo>
`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          "data/ir_sequence_data.xml": sequenceXml,
          [`demo/${moduleName}_data.xml`]: dataXml,
          "data/ir_cron_data.xml": cronXml,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_basic') {
        const folders = ['models', 'views', 'security', 'static/src/js', 'static/src/xml', 'static/src/css'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated OWL module",
    "description": "This is an autogenerated OWL module scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base", "web"],
    "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml"
    ],
    "assets": {
        "web.assets_backend": [
            "static/src/js/${moduleName}.js",
            "static/src/xml/${moduleName}.xml",
            "static/src/css/${moduleName}.css"
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
        default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)

    def action_do_something(self):
        self.ensure_one()
        return {
            'type': 'ir.actions.client',
            'tag': '${moduleName}_action',
            'params': {
                'model': self._name,
                'id': self.id,
            }
        }
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Open OWL View" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const owlJs = `/** @odoo-module **/
import { Component, useState } from "@odoo/owl";

export class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}Component extends Component {
    static template = "${moduleName}.Component";
    static props = {
        record: { type: Object },
    };

    setup() {
        this.state = useState({
            record: this.props.record,
        });
    }

    async onClick() {
        // Handle click event
        console.log("Clicked!");
    }
}`;

        const owlXml = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.Component" owl="1">
        <div class="o_${moduleName}_component">
            <h2>OWL Component</h2>
            <div class="o_${moduleName}_content">
                <p>Name: <t t-esc="state.record.name"/></p>
                <p>State: <t t-esc="state.record.state"/></p>
                <p>Amount: <t t-esc="state.record.amount"/></p>
                <button t-on-click="onClick" class="btn btn-primary">
                    Click Me
                </button>
            </div>
        </div>
    </t>
</templates>`;

        const owlCss = `.o_${moduleName}_component {
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin: 10px;
}

.o_${moduleName}_content {
    margin-top: 15px;
}

.o_${moduleName}_content p {
    margin: 5px 0;
}

.o_${moduleName}_content button {
    margin-top: 10px;
}`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          [`static/src/js/${moduleName}.js`]: owlJs,
          [`static/src/xml/${moduleName}.xml`]: owlXml,
          [`static/src/css/${moduleName}.css`]: owlCss,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'owl_advanced') {
        const folders = ['models', 'views', 'security', 'static/src/js', 'static/src/xml', 'static/src/css', 'static/src/components'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated advanced OWL module",
    "description": "This is an autogenerated advanced OWL module scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base", "web"],
    "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml"
    ],
    "assets": {
        "web.assets_backend": [
            "static/src/js/${moduleName}.js",
            "static/src/xml/${moduleName}.xml",
            "static/src/css/${moduleName}.css",
            "static/src/components/**/*.js",
            "static/src/components/**/*.xml",
            "static/src/components/**/*.css"
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": True
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models, _
from datetime import datetime

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    state = fields.Selection([('draft', 'Draft'),('confirmed', 'Confirmed'),('done', 'Done')],
     default='draft', string="State")
    description = fields.Text(string="Description")
    amount = fields.Float(string="Amount")
    active = fields.Boolean(default=True)
    date = fields.Date(string="Date", default=fields.Date.context_today)
    partner_id = fields.Many2one('res.partner', string="Partner")
    line_ids = fields.One2many('${modelName}.line', 'parent_id', string="Lines")

    def action_do_something(self):
        self.ensure_one()
        return {
            'type': 'ir.actions.client',
            'tag': '${moduleName}_action',
            'params': {
                'model': self._name,
                'id': self.id,
            }
        }

    def get_dashboard_data(self):
        return {
            'name': self.name,
            'state': self.state,
            'amount': self.amount,
            'date': self.date,
            'partner': self.partner_id.name if self.partner_id else False,
            'lines': [{
                'id': line.id,
                'name': line.name,
                'amount': line.amount,
            } for line in self.line_ids],
        }

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}Line(models.Model):
    _name = '${modelName}.line'
    _description = '${displayName} Line'

    name = fields.Char(string="Name", required=True)
    amount = fields.Float(string="Amount")
    parent_id = fields.Many2one('${modelName}', string="Parent")
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="amount"/>
                <field name="date"/>
                <field name="partner_id"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Open OWL View" class="oe_highlight"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="state"/>
                        <field name="description"/>
                        <field name="amount"/>
                        <field name="date"/>
                        <field name="partner_id"/>
                        <field name="active"/>
                    </group>
                    <notebook>
                        <page string="Lines">
                            <field name="line_ids">
                                <tree editable="bottom">
                                    <field name="name"/>
                                    <field name="amount"/>
                                </tree>
                            </field>
                        </page>
                    </notebook>
                </sheet>
            </form>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
access_${formattedModelName}_line,access_${moduleName}_line,model_${formattedModelName}_line,base.group_user,1,1,1,1
`;

        const owlJs = `/** @odoo-module **/

import { Component, useState, onMounted } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";
import { LineComponent } from "./components/line_component";

export class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}Component extends Component {
    static template = "${moduleName}.Component";
    static components = { LineComponent };
    static props = {
        record: { type: Object },
    };

    setup() {
        this.state = useState({
            record: this.props.record,
            loading: true,
            error: false,
        });
        this.orm = useService("orm");
        this.notification = useService("notification");

        onMounted(() => this.loadData());
    }

    async loadData() {
        try {
            const data = await this.orm.call(
                this.props.record.model,
                "get_dashboard_data",
                [this.props.record.id]
            );
            this.state.record = data;
            this.state.loading = false;
        } catch (error) {
            this.state.error = true;
            this.state.loading = false;
            this.notification.add("Error loading data", {
                type: "danger",
            });
        }
    }

    async onClick() {
        try {
            await this.orm.call(
                this.props.record.model,
                "action_do_something",
                [this.props.record.id]
            );
            this.notification.add("Action completed successfully", {
                type: "success",
            });
        } catch (error) {
            this.notification.add("Error performing action", {
                type: "danger",
            });
        }
    }
}`;

        const owlXml = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.Component" owl="1">
        <div class="o_${moduleName}_component">
            <div t-if="state.loading" class="o_${moduleName}_loading">
                Loading...
            </div>
            <div t-elif="state.error" class="o_${moduleName}_error">
                Error loading data
            </div>
            <div t-else="" class="o_${moduleName}_content">
                <h2>OWL Component</h2>
                <div class="o_${moduleName}_header">
                    <p>Name: <t t-esc="state.record.name"/></p>
                    <p>State: <t t-esc="state.record.state"/></p>
                    <p>Amount: <t t-esc="state.record.amount"/></p>
                    <p>Date: <t t-esc="state.record.date"/></p>
                    <p>Partner: <t t-esc="state.record.partner"/></p>
                </div>
                <div class="o_${moduleName}_lines">
                    <h3>Lines</h3>
                    <LineComponent t-foreach="state.record.lines" t-as="line" t-key="line.id" line="line"/>
                </div>
                <button t-on-click="onClick" class="btn btn-primary">
                    Click Me
                </button>
            </div>
        </div>
    </t>
</templates>`;

        const owlCss = `.o_${moduleName}_component {
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin: 10px;
}

.o_${moduleName}_loading,
.o_${moduleName}_error {
    text-align: center;
    padding: 20px;
    font-size: 16px;
}

.o_${moduleName}_error {
    color: #dc3545;
}

.o_${moduleName}_content {
    margin-top: 15px;
}

.o_${moduleName}_header {
    background-color: white;
    padding: 15px;
    border-radius: 4px;
    margin-bottom: 20px;
}

.o_${moduleName}_header p {
    margin: 5px 0;
}

.o_${moduleName}_lines {
    margin: 20px 0;
}

.o_${moduleName}_lines h3 {
    margin-bottom: 10px;
}

.o_${moduleName}_content button {
    margin-top: 10px;
}`;

        const lineComponentJs = `/** @odoo-module **/

import { Component } from "@odoo/owl";

export class LineComponent extends Component {
    static template = "${moduleName}.LineComponent";
    static props = {
        line: { type: Object },
    };
}`;

        const lineComponentXml = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.LineComponent" owl="1">
        <div class="o_${moduleName}_line">
            <span class="o_${moduleName}_line_name"><t t-esc="props.line.name"/></span>
            <span class="o_${moduleName}_line_amount"><t t-esc="props.line.amount"/></span>
        </div>
    </t>
</templates>`;

        const lineComponentCss = `.o_${moduleName}_line {
    display: flex;
    justify-content: space-between;
    padding: 10px;
    background-color: white;
    border-radius: 4px;
    margin-bottom: 5px;
}

.o_${moduleName}_line_name {
    font-weight: bold;
}

.o_${moduleName}_line_amount {
    color: #28a745;
}`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          [`static/src/js/${moduleName}.js`]: owlJs,
          [`static/src/xml/${moduleName}.xml`]: owlXml,
          [`static/src/css/${moduleName}.css`]: owlCss,
          [`static/src/components/line_component.js`]: lineComponentJs,
          [`static/src/components/line_component.xml`]: lineComponentXml,
          [`static/src/components/line_component.css`]: lineComponentCss,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'website_theme') {
        const folders = ['models', 'views', 'security', 'static/src/js', 'static/src/xml', 'static/src/css', 'static/src/scss', 'static/src/images'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Theme/Creative",
    "summary": "Auto-generated website theme",
    "description": "This is an autogenerated website theme scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base", "web", "website"],
    "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml",
        "views/${moduleName}_templates.xml"
    ],
    "assets": {
        "web.assets_frontend": [
            "static/src/js/${moduleName}.js",
            "static/src/xml/${moduleName}.xml",
            "static/src/css/${moduleName}.css",
            "static/src/scss/${moduleName}.scss"
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": False
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    description = fields.Text(string="Description")
    active = fields.Boolean(default=True)
    image = fields.Binary(string="Image")
    website_published = fields.Boolean(string="Published", default=True)

    def action_publish(self):
        self.website_published = True

    def action_unpublish(self):
        self.website_published = False
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="website_published"/>
                <field name="active"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_publish" type="object" string="Publish" class="oe_highlight" attrs="{'invisible': [('website_published', '=', True)]}"/>
                    <button name="action_unpublish" type="object" string="Unpublish" class="btn btn-secondary" attrs="{'invisible': [('website_published', '=', False)]}"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                        <field name="image" widget="image"/>
                        <field name="website_published"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}" parent="website.website_configuration"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const templateXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <template id="${formattedModelName}_layout" name="${displayName} Layout" inherit_id="website.layout">
        <xpath expr="//header//ul[hasclass('o_menu_sections')]" position="inside">
            <li class="nav-item">
                <a href="/${moduleName}" class="nav-link">${displayName}</a>
            </li>
        </xpath>
    </template>

    <template id="${formattedModelName}_home" name="${displayName} Home">
        <t t-call="website.layout">
            <div class="container">
                <div class="row">
                    <div class="col-12">
                        <h1>Welcome to ${displayName}</h1>
                        <p>This is a sample website theme.</p>
                    </div>
                </div>
            </div>
        </t>
    </template>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const owlJs = `/** @odoo-module **/

import { Component, useState, onMounted } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";

export class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}Component extends Component {
    static template = "${moduleName}.Component";
    static props = {};

    setup() {
        this.state = useState({
            loading: true,
            error: false,
        });
        this.orm = useService("orm");
        this.notification = useService("notification");

        onMounted(() => this.loadData());
    }

    async loadData() {
        try {
            const data = await this.orm.call(
                "${modelName}",
                "get_systray_data",
                []
            );
            this.state.loading = false;
        } catch (error) {
            this.state.error = true;
            this.state.loading = false;
            this.notification.add("Error loading data", {
                type: "danger",
            });
        }
    }
}`;

        const owlXml = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.Component" owl="1">
        <div class="o_${moduleName}_component">
            <div t-if="state.loading" class="o_${moduleName}_loading">
                Loading...
            </div>
            <div t-elif="state.error" class="o_${moduleName}_error">
                Error loading data
            </div>
            <div t-else="" class="o_${moduleName}_content">
                <h2>Welcome to ${displayName}</h2>
                <p>This is a sample website theme component.</p>
            </div>
        </div>
    </t>
</templates>`;

        const owlCss = `.o_${moduleName}_component {
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin: 10px;
}

.o_${moduleName}_loading,
.o_${moduleName}_error {
    text-align: center;
    padding: 20px;
    font-size: 16px;
}

.o_${moduleName}_error {
    color: #dc3545;
}

.o_${moduleName}_content {
    margin-top: 15px;
}`;

        const scss = `// ${moduleName} Theme Variables
$primary-color: #007bff;
$secondary-color: #6c757d;
$success-color: #28a745;
$info-color: #17a2b8;
$warning-color: #ffc107;
$danger-color: #dc3545;
$light-color: #f8f9fa;
$dark-color: #343a40;

// ${moduleName} Theme Mixins
@mixin flex-center {
    display: flex;
    align-items: center;
    justify-content: center;
}

@mixin responsive($breakpoint) {
    @if $breakpoint == sm {
        @media (min-width: 576px) { @content; }
    }
    @if $breakpoint == md {
        @media (min-width: 768px) { @content; }
    }
    @if $breakpoint == lg {
        @media (min-width: 992px) { @content; }
    }
    @if $breakpoint == xl {
        @media (min-width: 1200px) { @content; }
    }
}

// ${moduleName} Theme Styles
.o_${moduleName} {
    &_header {
        background-color: $primary-color;
        color: white;
        padding: 1rem;
        
        @include responsive(md) {
            padding: 2rem;
        }
    }

    &_content {
        padding: 1rem;
        
        @include responsive(md) {
            padding: 2rem;
        }
    }

    &_footer {
        background-color: $dark-color;
        color: white;
        padding: 1rem;
        text-align: center;
    }
}`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          [`views/${formattedModelName}_templates.xml`]: templateXml,
          "security/ir.model.access.csv": accessCsv,
          [`static/src/js/${moduleName}.js`]: owlJs,
          [`static/src/xml/${moduleName}.xml`]: owlXml,
          [`static/src/css/${moduleName}.css`]: owlCss,
          [`static/src/scss/${moduleName}.scss`]: scss,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    } else if (type == 'systray_module') {
        const folders = ['models', 'views', 'security', 'static/src/js', 'static/src/xml', 'static/src/css'];

        const manifestContent = `# -*- coding: utf-8 -*-
{
    "name": "${displayName}",
    "version": "18.0.1.0.0",
    "category": "Tools",
    "summary": "Auto-generated systray module",
    "description": "This is an autogenerated systray module scaffold.",
    "author": "Cybrosys Techno Solutions",
    "maintainer": "",
    "website": "https://www.cybrosys.com",
    "depends": ["base", "web"],
    "data": [
        "security/ir.model.access.csv",
        "views/${moduleName}_views.xml"
    ],
    "assets": {
        "web.assets_backend": [
            "static/src/js/${moduleName}.js",
            "static/src/xml/${moduleName}.xml",
            "static/src/css/${moduleName}.css"
        ]
    },
    "license": "LGPL-3",
    "installable": True,
    "auto_install": False,
    "application": False
}`;

        const modelName = moduleName.replace(/_/g, '.');
        const formattedModelName = modelName.replace(/\./g, '_');

        const modelPy = `# -*- coding: utf-8 -*-
from odoo import api,fields,models

class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}(models.Model):
    _name = '${modelName}'
    _description = '${displayName}'

    name = fields.Char(string="Name", required=True)
    description = fields.Text(string="Description")
    active = fields.Boolean(default=True)
    state = fields.Selection([('draft', 'Draft'),('done', 'Done')],
     string="State", default='draft')

    def action_do_something(self):
        self.ensure_one()
        self.state = 'done'

    def get_systray_data(self):
        return {
            'name': self.name,
            'description': self.description,
            'state': self.state
        }
`;

        const viewXml = `<?xml version="1.0" encoding="UTF-8"?>
<odoo>
    <record id="${formattedModelName}_view_list" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.list</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <list>
                <field name="name"/>
                <field name="state"/>
                <field name="active"/>
            </list>
        </field>
    </record>
    <record id="${formattedModelName}_view_form" model="ir.ui.view">
        <field name="name">${formattedModelName}.view.form</field>
        <field name="model">${modelName}</field>
        <field name="arch" type="xml">
            <form string="Form">
                <header>
                    <button name="action_do_something" type="object" string="Do Something" class="oe_highlight" attrs="{'invisible': [('state', '=', 'done')]}"/>
                </header>
                <sheet>
                    <group>
                        <field name="name"/>
                        <field name="description"/>
                        <field name="state"/>
                        <field name="active"/>
                    </group>
                </sheet>
            </form>
        </field>
    </record>
    <record id="action_${formattedModelName}" model="ir.actions.act_window">
        <field name="name">${displayName}</field>
        <field name="res_model">${modelName}</field>
        <field name="view_mode">list,form</field>
    </record>
    <menuitem id="menu_${formattedModelName}_root" name="${displayName}" parent="base.menu_administration"/>
    <menuitem id="menu_${formattedModelName}_main" name="Records" parent="menu_${formattedModelName}_root" action="action_${formattedModelName}"/>
</odoo>`;

        const accessCsv = `id,name,model_id:id,group_id:id,perm_read,perm_write,perm_create,perm_unlink
access_${formattedModelName},access_${moduleName},model_${formattedModelName},base.group_user,1,1,1,1
`;

        const owlJs = `/** @odoo-module **/

import { Component, useState, onMounted } from "@odoo/owl";
import { useService } from "@web/core/utils/hooks";

export class ${moduleName
          .split("_")
          .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
          .join("")}Component extends Component {
    static template = "${moduleName}.Component";
    static props = {};

    setup() {
        this.state = useState({
            loading: true,
            error: false,
        });
        this.orm = useService("orm");
        this.notification = useService("notification");

        onMounted(() => this.loadData());
    }

    async loadData() {
        try {
            const data = await this.orm.call(
                "${modelName}",
                "get_systray_data",
                []
            );
            this.state.loading = false;
        } catch (error) {
            this.state.error = true;
            this.state.loading = false;
            this.notification.add("Error loading data", {
                type: "danger",
            });
        }
    }
}`;

        const owlXml = `<?xml version="1.0" encoding="UTF-8"?>
<templates xml:space="preserve">
    <t t-name="${moduleName}.Component" owl="1">
        <div class="o_${moduleName}_component">
            <div t-if="state.loading" class="o_${moduleName}_loading">
                Loading...
            </div>
            <div t-elif="state.error" class="o_${moduleName}_error">
                Error loading data
            </div>
            <div t-else="" class="o_${moduleName}_content">
                <h2>Welcome to ${displayName}</h2>
                <p>This is a sample systray component.</p>
            </div>
        </div>
    </t>
</templates>`;

        const owlCss = `.o_${moduleName}_component {
    padding: 20px;
    background-color: #f8f9fa;
    border-radius: 4px;
    margin: 10px;
}

.o_${moduleName}_loading,
.o_${moduleName}_error {
    text-align: center;
    padding: 20px;
    font-size: 16px;
}

.o_${moduleName}_error {
    color: #dc3545;
}

.o_${moduleName}_content {
    margin-top: 15px;
}`;

        const files = {
          "__init__.py": 
`# -*- coding: utf-8 -*-
from . import models`,
          "__manifest__.py": manifestContent,
          "models/__init__.py": 
`# -*- coding: utf-8 -*-
from . import ${formattedModelName}`,
          [`models/${formattedModelName}.py`]: modelPy,
          [`views/${formattedModelName}_views.xml`]: viewXml,
          "security/ir.model.access.csv": accessCsv,
          [`static/src/js/${moduleName}.js`]: owlJs,
          [`static/src/xml/${moduleName}.xml`]: owlXml,
          [`static/src/css/${moduleName}.css`]: owlCss,
        };

        const dirPromises = folders.map(dir =>
            vscode.workspace.fs.createDirectory(vscode.Uri.joinPath(rootUri, dir))
        );

        const filePromises = Object.entries(files).map(([relPath, content]) => {
            const fileUri = vscode.Uri.joinPath(rootUri, relPath);
            const uint8arr = Buffer.from(content, 'utf8');
            return vscode.workspace.fs.writeFile(fileUri, uint8arr);
        });

        await Promise.all([...dirPromises, ...filePromises]);
    }
}

module.exports = {
    createOdooScaffold
}; 